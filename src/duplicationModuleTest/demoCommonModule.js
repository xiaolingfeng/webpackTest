const str = '使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：使用 optimization.splitChunks 配置选项，现在可以看到已经从 index.bundle.js 和 another.bundle.js 中删除了重复的依赖项。需要注意的是，此插件将 lodash 这个沉重负担从主 bundle 中移除，然后分离到一个单独的 chunk 中。执行 npm run build 查看效果：';


export default str;
